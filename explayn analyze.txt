-> Limit: 200 row(s)  (actual time=4.229..4.257 rows=200 loops=1)
    -> Table scan on <temporary>  (actual time=4.227..4.246 rows=200 loops=1)
        -> Aggregate using temporary table  (actual time=4.226..4.226 rows=391 loops=1)
            -> Nested loop inner join  (cost=1173.16 rows=634) (actual time=0.045..3.824 rows=634 loops=1)
                -> Nested loop inner join  (cost=951.26 rows=634) (actual time=0.041..3.082 rows=634 loops=1)
                    -> Nested loop inner join  (cost=729.36 rows=634) (actual time=0.037..2.396 rows=634 loops=1)
                        -> Nested loop inner join  (cost=507.46 rows=634) (actual time=0.033..1.695 rows=634 loops=1)
                            -> Filter: (p.rental_id is not null)  (cost=285.56 rows=634) (actual time=0.026..0.927 rows=634 loops=1)
-> Index range scan on p using index_for_test over ('2005-07-30 00:00:00' <= payment_date < '2005-07-31 00:00:00'), with index condition: ((p.payment_date >= TIMESTAMP'2005-07-30 00:00:00') and (p.payment_date < TIMESTAMP'2005-07-31 00:00:00'))  (cost=285.56 rows=634) (actual time=0.024..0.883 rows=634 loops=1)
                            -> Single-row index lookup on r using PRIMARY (rental_id=p.rental_id)  (cost=0.25 rows=1) (actual time=0.001..0.001 rows=1 loops=634)
                        -> Single-row index lookup on c using PRIMARY (customer_id=r.customer_id)  (cost=0.25 rows=1) (actual time=0.001..0.001 rows=1 loops=634)
                    -> Single-row index lookup on i using PRIMARY (inventory_id=r.inventory_id)  (cost=0.25 rows=1) (actual time=0.001..0.001 rows=1 loops=634)
                -> Single-row covering index lookup on f using PRIMARY (film_id=i.film_id)  (cost=0.25 rows=1) (actual time=0.001..0.001 rows=1 loops=634)
